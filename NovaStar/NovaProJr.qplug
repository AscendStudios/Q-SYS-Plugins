-- Basic Novastar Control
-- By Casey Compton
-- October 21 2022

-- Information block for the plugin
PluginInfo = {
    Name = "NovaPro UHD Jr",
    Version = "1.3",
    BuildVersion = "0.0.0.5",
    Id = "NovaProJr",
    Author = "Casey Compton",
    Description = "Plugin for very basic http control of a NovaStar NovaPro UHD Jr"
  }
 
  -- Define the color of the plugin object in the design
  function GetColor(props)
    return { 207, 129, 45 }
  end
 
  -- The name that will initially display when dragged into a design
  function GetPrettyName(props)
    return "NovaStar NovaPro UHD Jr, V " .. PluginInfo.Version
  end
 
  -- Optional function used if plugin has multiple pages
  PageNames = { "Control", "Setup" }  --List the pages within the plugin
  function GetPages(props)
    local pages = {}
    for ix,name in ipairs(PageNames) do
      table.insert(pages, {name = PageNames[ix]})
    end
    return pages
  end
 
  -- Define User configurable Properties of the plugin
  function GetProperties()
    local props = {}
    table.insert(props, {
      Name = "Debug Print",
      Type = "enum",
      Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
      Value = "None"
    })
    return props
  end


  -- Optional function to update available properties when properties are altered by the user
  function RectifyProperties(props)
    if props.plugin_show_debug.Value == false then
      props["Debug Print"].IsHidden = true
    end
    return props
  end



  -- Defines the Controls used within the plugin
  function GetControls(props)
    local ctrls = {
        {
            Name = "bright",
            ControlType = "Knob",
            ControlUnit = "Percent",
            Min = 0,
            Max = 100,
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
          },
          {
            Name = "brightup",
            ControlType = "Button",
            ButtonType = "Momentary",
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
            Icon = "Arrow Up",
          },
          {
            Name = "brightdn",
            ControlType = "Button",
            ButtonType = "Momentary",
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
            Icon = "Arrow Down",
          },
          {
            Name = "IpAddress",
            ControlType = "Text",
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
        }
    }
    for _, name in ipairs{'Normal Mode', 
                            'Blackout', 
                            'Test Red', 
                            'Test Green', 
                            'Test Blue', 
                            'Test White', 
                            'Test Horizontal', 
                            'Test Vertical', 
                            'Test Diagonal 1', 
                            'Test Diagonal 2'} do
        table.insert(ctrls, 
        {
            Name = name,
            ControlType = "Button",
            ButtonType = "Momentary",
            Count = 1,
            UserPin = true,
            PinStyle = "Input",
        }) end

    return ctrls
  end

  --Layout of controls and graphics for the plugin UI to display
  function GetControlLayout(props)
    local layout = {}
    local graphics = {}
    local CurrentPage = PageNames[props["page_index"].Value]
    if CurrentPage == "Control" then
        layout.brightup = {
            PrettyName = "Brightness~Up",
            Style = "Button",
            ButtonStyle = "Momentary",
            Position = { 150, 50},
            Size = { 50, 50 }
          }
          layout.bright = {
            PrettyName = "Brightness~Level",
            Style = "Meter",
            MeterStyle = "Level",
            ShowTextbox = true,
            Color = { 110,198,241},
            Position = { 200, 50 },
            Size = { 50, 100 },
            Margin = 2,
            CornerRadius = 2,
          }
          layout.brightdn = {
            PrettyName = "Brightness~Down",
            Style = "Button",
            ButtonStyle = "Momentary",
            Position = { 150, 100},
            Size = { 50, 50 }
          }
      for ix,name in ipairs{'Normal Mode', 'Blackout'} do
        layout[name] = {
          PrettyName = "Mode~"..name,
          Legend = name,
          TextFontSize = 14,
          Style = "Button",
          ButtonStyle = "Momentary",
          Color = { 110, 198, 241 },
          Position = { 25, 50*ix},
          Size = { 100, 50 }
        } end

        table.insert(graphics,
        {
            Type = "Header",
            Text = "Modes",
            Position = { 25, 0 },
            Size = { 100, 50 },
            FontSize = 12
          })

          table.insert(graphics,
          {
              Type = "Header",
              Text = "Brightness",
              Position = { 150, 0 },
              Size = { 100, 50 },
              FontSize = 12
            })

        table.insert(graphics,
        {
            Type = "Header",
            Text = "IP Address",
            Position = { 25, 150 },
            Size = { 225, 50 },
            FontSize = 12
            })

        layout["IpAddress"] = {
            PrettyName = "Network~IP",
            Style = "Textbox",
            Position = {25, 200},
            Size = {225,25},
            Color = {0,0,0},
            FontSize = 12,
        }

        table.insert(graphics,
        {
            Type = "Textbox",
            Text = "",
            Position = { 25, 225 },
            Size = { 225, 25 },
            FontSize = 12
            })

    elseif CurrentPage == "Setup" then
        layout["IpAddress"] = {
                PrettyName = "Network~IP",
                Style = "Textbox",
                Position = {100,15},
                Size = {100,25},
                Color = {0,0,0}
            }
        table.insert(graphics, 
        {
            Type = "Text",
            Text = "IP Address:",
            Position = {0,15},
            Size = {100,25},
            FontSize = 14,
            HTextAlign = "Left"
        }
    )
        for ix,name in ipairs{
                                'Test Red', 
                                'Test Green', 
                                'Test Blue', 
                                'Test White', 
                                'Test Horizontal', 
                                'Test Vertical', 
                                'Test Diagonal 1', 
                                'Test Diagonal 2'
                             } do
            layout[name] = {
              PrettyName = "TestMode~"..name,
              Legend = name,
              TextFontSize = 12,
              Style = "Button",
              ButtonStyle = "Momentary",
              Color = { 110, 198, 241 },
              Position = { 100, 30*ix+30},
              Size = { 100, 25 }
            } end
        table.insert(graphics,
        {
            Type = "Text",
            Text = "Test Modes:",
            Position = {0,60},
            Size = {100,25},
            FontSize = 14,
            HTextAlign = "Left"
        })
    end
    return layout, graphics
  end
  
--Start event based logic
  if Controls then
    -- Load Modules --
   local rj = require "rapidjson"

-- Variables --
    local inc = 5
    local dec = 5
    local session = nil
    local f = function() end
    local passcode = tostring(88888888)  -- Default Password


    -- Helper Functions --
    local function set_ip()
        return Controls.IpAddress.String
    end

    local function create_session()
        return math.random(100000000000, 999999999999)
    end

    -- Helper Function to create ordered Query Parameters
    function HttpClient.EncodeOrderedParams(params, vals, base)
        local result = ''
        for index, param in ipairs(params) do
            if index == 1 then
                result = string.format("?%s=%s", param, vals[index])  -- Don't include the ampersand at the begininng of the param
            else
                result = string.format("%s&%s=%s", result, param, vals[index])
            end
        end
        if base == nil then
            return result
        else
            return HttpClient.CreateUrl(base)..result
        end
    end


    -- Session Login
    local function register_session()
        if Controls.IpAddress.String ~= '' then
            session = create_session()
            HttpClient.Download{
                    Headers = {["Content-Type"] = "application/json"},
                    Timeout = 10,
                    Url = string.format("http://%s/page/panel/leds.cgi?RW=1&DevID=0&CMD=0&PassWord=%s&_=%s", set_ip(), passcode, session),
                    EventHandler = function(tbl, code, data, err, headers)
                        if #data > 0 then
                            data = rj.decode(data)
                            if data.ERRC == "0" then
                            print("Success", code, "Data:", data)
                            elseif data.ERRC == "8" then
                                print("session data invalid... Creating new session")
                                session = create_session()
                                register_session()
                                f()
                            else
                                print("Unexpected Error Reaching Server:", data.ERRC, "Code Status:", code, err)
                                print("Full Data: ", data)
                            end
                        else
                            print("No Data Returned; Check server address and try again")
                        end
                        return code, data, err
                    end
                }
            return session
        end
    end


    local URL = {
        done = function(tbl, code, data, err, headers)
            if #data > 0 then
                data = rj.decode(data)
                if data.ERRC == "0" then
                print("Success", code, "Data:", data)
                elseif data.ERRC == "8" then
                    print("Session data invalid... Creating new session")
                    session = create_session()
                    register_session()
                    f()
                elseif data.ERRC == "4" then
                    print("Malfromed Command")
                else
                    print("Unexpected Error Reaching Server:", data.ERRC, "Code Status:", code, err)
                    print("Full Data: ", data)
                end
            else
                print("No Data Returned; Check server address and try again")
            end
            return code, data, err
        end,

        Base = {
            Host = 'http://'..Controls.IpAddress.String,
            Path = 'page/panel/leds.cgi',
        },
        
        TestParams = {
            "RW",
            "DevID",
            "CMD",
            "ImageCtrl",
            "Test_TypeM",
            "Test_TypeS",
            "Test_Bright",
            "Test_Gap",
            "Test_Speed",
            "_"
        },
        
        Brightness_Params = {
            "RW",
            "DevID",
            "CMD",
            "Out_No",
            "Out_FrameRate",
            "Out_Bright",
            "Out_Contrast",
            "Out_Sat",
            "Out_Hue",
            "_"
        },
    }

        -- RW, DevID, CMD, Out_No, Out_FrameRate, Out_Bright, Out_Contrast, Out_Sat, Out_Hue, _
        local function brightness()
            return { 1, 0, 18, 0, 10, math.floor(Controls.bright.Value), 50, 50, 0, session }
        end

        -- RW, DevID, CMD, ImageCtrl, Test_TypeM, Test_TypeS, Test_Bright, Test_Gap, Test_Speed, _
        local normal_mode = function() return { 1, 0, 23, 0, 0, 0, 3, 5, 3, session } end

        local blackout =    function() return { 1, 0, 23, 3, 0, 0, 3, 5, 3, session } end
        local red =         function() return { 1, 0, 23, 3, 0, 1, 3, 5, 3, session } end
        local green =       function() return { 1, 0, 23, 3, 0, 2, 3, 5, 3, session } end
        local blue =        function() return { 1, 0, 23, 3, 0, 3, 3, 5, 3, session } end
        local white =       function() return { 1, 0, 23, 3, 0, 4, 3, 5, 3, session } end
        local horizontal =  function() return { 1, 0, 23, 3, 2, 0, 3, 5, 3, session } end
        local vertical =    function() return { 1, 0, 23, 3, 2, 1, 3, 5, 3, session } end
        local diagonal = {
                            function() return { 1, 0, 23, 3, 2, 2, 3, 5, 3, session } end,
                            function() return { 1, 0, 23, 3, 2, 3, 3, 5, 3, session } end
        }





-- FUNCTIONS --

    local function bright_up( ctl )
        if ctl.Boolean and Controls.bright.Value < 100 then
            Controls.bright.Value = Controls.bright.Value + inc
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.Brightness_Params, brightness(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls.brightup.EventHandler
    end

    local function bright_down( ctl )
        if ctl.Boolean and Controls.bright.Value > 0 then
            Controls.bright.Value = Controls.bright.Value - dec
            HttpClient.EncodeOrderedParams(URL.Brightness_Params, brightness(), URL.Base)
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.Brightness_Params, brightness(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls.brightdn.EventHandler
    end

    local function ip_event()
        URL.Base.Host = 'http://'..Controls.IpAddress.String
        register_session()
    end


-- EventHandlers --
    Controls.IpAddress.EventHandler = ip_event
    Controls.brightdn.EventHandler = bright_down
    Controls.brightup.EventHandler = bright_up

-- Main Modes

    Controls["Normal Mode"].EventHandler = function ()
        if Controls["Normal Mode"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, normal_mode(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Normal Mode"].EventHandler
    end

    Controls.Blackout.EventHandler = function ()
        if Controls["Blackout"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, blackout(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls.Blackout.EventHandler
    end
 
-- Test Modes

    Controls["Test Red"].EventHandler = function ()
        if Controls["Test Red"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, red(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test Red"].EventHandler
    end

    Controls["Test Green"].EventHandler = function ()
        if Controls["Test Green"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, green(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test Green"].EventHandler
    end

    Controls["Test White"].EventHandler = function ()
        if Controls["Test White"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, white(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test White"].EventHandler
    end

    Controls["Test Blue"].EventHandler = function ()
        if Controls["Test Blue"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, blue(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test Blue"].EventHandler
    end

    Controls["Test Horizontal"].EventHandler = function ()
        if Controls["Test Horizontal"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, horizontal(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test Horizontal"].EventHandler
    end

    Controls["Test Vertical"].EventHandler = function ()
        if Controls["Test Vertical"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, vertical(), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test Vertical"].EventHandler
    end

    Controls["Test Diagonal 1"].EventHandler = function ()
        if Controls["Test Diagonal 1"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, diagonal[1](), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test Diagonal 1"].EventHandler
    end

    Controls["Test Diagonal 2"].EventHandler = function ()
        if Controls["Test Diagonal 2"].Boolean then
            HttpClient.Download({
                Url = HttpClient.EncodeOrderedParams(URL.TestParams, diagonal[2](), URL.Base),
                Headers = {["Content-Type"] = "application/json"},
                Timeout = 10,
                EventHandler = URL.done
            })
        end
        f = Controls["Test Diagonal 2"].EventHandler
    end

    --INIT--
    session = create_session()
    register_session()
end
