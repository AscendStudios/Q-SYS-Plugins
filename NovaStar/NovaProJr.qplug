-- Basic Novastar Control
-- By Casey Compton
-- June 30 2022

-- Information block for the plugin
PluginInfo = {
    Name = "NovaPro UHD Jr",
    Version = "1.0",
    BuildVersion = "0.0.0.1",
    Id = "NovaProJr",
    Author = "Casey Compton",
    Description = "Plugin for very basic http control of a NovaStar NovaPro UHD Jr"
  }
 
  -- Define the color of the plugin object in the design
  function GetColor(props)
    return { 207, 129, 45 }
  end
 
  -- The name that will initially display when dragged into a design
  function GetPrettyName(props)
    return "NovaStar NovaPro UHD Jr, V " .. PluginInfo.Version
  end
 
  -- Optional function used if plugin has multiple pages
  PageNames = { "Control", "Setup" }  --List the pages within the plugin
  function GetPages(props)
    local pages = {}
    for ix,name in ipairs(PageNames) do
      table.insert(pages, {name = PageNames[ix]})
    end
    return pages
  end
 
  -- Define User configurable Properties of the plugin
  function GetProperties()
    local props = {}
    table.insert(props, {
      Name = "Debug Print",
      Type = "enum",
      Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
      Value = "None"
    })
    return props
  end


  -- Optional function to update available properties when properties are altered by the user
  function RectifyProperties(props)
    if props.plugin_show_debug.Value == false then
      props["Debug Print"].IsHidden = true
    end
    return props
  end



  -- Defines the Controls used within the plugin
  function GetControls(props)
    local ctrls = {
        {
            Name = "bright",
            ControlType = "Knob",
            ControlUnit = "Percent",
            Min = 0,
            Max = 100,
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
          },
          {
            Name = "brightup",
            ControlType = "Button",
            ButtonType = "Momentary",
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
            Icon = "Arrow Up",
          },
          {
            Name = "brightdn",
            ControlType = "Button",
            ButtonType = "Momentary",
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
            Icon = "Arrow Down",
          },
          {
            Name = "IpAddress",
            ControlType = "Text",
            Count = 1,
            UserPin = true,
            PinStyle = "Both",
        }
    }
    for _, name in ipairs{'Normal Mode', 
                            'Blackout', 
                            'Test Red', 
                            'Test Green', 
                            'Test Blue', 
                            'Test White', 
                            'Test Horizontal', 
                            'Test Vertical', 
                            'Test Diagonal 1', 
                            'Test Diagonal 2'} do
        table.insert(ctrls, 
        {
            Name = name,
            ControlType = "Button",
            ButtonType = "Momentary",
            Count = 1,
            UserPin = true,
            PinStyle = "Input",
        }) end

    return ctrls
  end

  --Layout of controls and graphics for the plugin UI to display
  function GetControlLayout(props)
    local layout = {}
    local graphics = {}
    local CurrentPage = PageNames[props["page_index"].Value]
    if CurrentPage == "Control" then
        layout.brightup = {
            PrettyName = "Brightness~Up",
            Style = "Button",
            ButtonStyle = "Momentary",
            Position = { 150, 50},
            Size = { 50, 50 }
          }
          layout.bright = {
            PrettyName = "Brightness~Level",
            Style = "Meter",
            MeterStyle = "Level",
            ShowTextbox = true,
            Color = { 110,198,241},
            Position = { 200, 50 },
            Size = { 50, 100 },
            Margin = 2,
            CornerRadius = 2,
          }
          layout.brightdn = {
            PrettyName = "Brightness~Down",
            Style = "Button",
            ButtonStyle = "Momentary",
            Position = { 150, 100},
            Size = { 50, 50 }
          }
      for ix,name in ipairs{'Normal Mode', 'Blackout'} do
        layout[name] = {
          PrettyName = "Mode~"..name,
          Legend = name,
          TextFontSize = 14,
          Style = "Button",
          ButtonStyle = "Momentary",
          Color = { 110, 198, 241 },
          Position = { 25, 50*ix},
          Size = { 100, 50 }
        } end

        table.insert(graphics,
        {
            Type = "Header",
            Text = "Modes",
            Position = { 25, 0 },
            Size = { 100, 50 },
            FontSize = 12
          })

          table.insert(graphics,
          {
              Type = "Header",
              Text = "Brightness",
              Position = { 150, 0 },
              Size = { 100, 50 },
              FontSize = 12
            })

        table.insert(graphics,
        {
            Type = "Header",
            Text = "IP Address",
            Position = { 25, 150 },
            Size = { 225, 50 },
            FontSize = 12
            })

        layout["IpAddress"] = {
            PrettyName = "Network~IP",
            Style = "Textbox",
            Position = {25, 200},
            Size = {225,25},
            Color = {0,0,0},
            FontSize = 12,
        }

        table.insert(graphics,
        {
            Type = "Textbox",
            Text = "",
            Position = { 25, 225 },
            Size = { 225, 25 },
            FontSize = 12
            })

    elseif CurrentPage == "Setup" then
        layout["IpAddress"] = {
                PrettyName = "Network~IP",
                Style = "Textbox",
                Position = {100,15},
                Size = {100,25},
                Color = {0,0,0}
            }
        table.insert(graphics, 
        {
            Type = "Text",
            Text = "IP Address:",
            Position = {0,15},
            Size = {100,25},
            FontSize = 14,
            HTextAlign = "Left"
        }
    )
        for ix,name in ipairs{
                                'Test Red', 
                                'Test Green', 
                                'Test Blue', 
                                'Test White', 
                                'Test Horizontal', 
                                'Test Vertical', 
                                'Test Diagonal 1', 
                                'Test Diagonal 2'
                             } do
            layout[name] = {
              PrettyName = "TestMode~"..name,
              Legend = name,
              TextFontSize = 12,
              Style = "Button",
              ButtonStyle = "Momentary",
              Color = { 110, 198, 241 },
              Position = { 100, 30*ix+30},
              Size = { 100, 25 }
            } end
        table.insert(graphics, 
        {
            Type = "Text",
            Text = "Test Modes:",
            Position = {0,60},
            Size = {100,25},
            FontSize = 14,
            HTextAlign = "Left"
        })
    end
    return layout, graphics
  end
  
--Start event based logic
  if Controls then
    -- Load Modules --
   require "json"

-- Variables --
    local ip_add = Controls.IpAddress.String
    local brightness = Controls.bright.Value
    local inc = 5
    local dec = 5
    local session = nil
    local passcode = tostring(888888888)  -- Default Password

    -- Helpe Functions --
    local function set_ip()
        ip_add = Controls.IpAddress.String
        return ip_add
    end

    local function set_brightness_val()
        brightness = Controls.bright.Value
        return tostring(brightness)
    end

    local URL = {}

    URL.done = function(tbl, code, data, err, headers)
        data = json.encode(data)
        if data.ERRC == "0" then
           print("Success")
        elseif data.ERRC == "8" then
            print("session data invalid... Creating new session")
            session = create_session()
            register_session()
        else 
            print("Unexpected Error:", data.ERRC)
        end
        return code, data, err
      end

    URL.Base = {
        Host = set_ip(),
        Path = 'page/panel/leds.cgi',
        Query = nil  -- Set me when building Get Request
    }
    
    URL.TestParams = {
        RW = 1,
        DevID = 0,
        CMD = 23,
        ImageCtrl = 0,
        Test_TypeM = 0,
        Test_TypeS = 0,
        Test_Bright = 3,
        Test_Gap = 5,
        Test_Speed = 3,
        _ = session
    }

    URL.Brightness_Params = {
        RW  = 1,
        DevID = 0,
        CMD = 19,
        Out_No = 0,
        Out_FrameRate = 10,
        Out_Bright = 10,
        Out_Contrast = 50,
        Out_Sat = 50,
        Out_Hue = 0,
        _ = session,
    }

    URL.Choice = {
        brightness = function ()
            URL.Brightness_Params.Out_Bright = set_brightness_val()
            URL.Base.Query = URL.Brightness_Params
            return URL.Base
        end,

        normal = function()
            URL.TestParams.ImageCtrl = 0
            URL.TestParams.Test_TypeM = 0
            URL.TestParams.Test_TypeS = 0
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        blackout = function()
            URL.TestParams.ImageCtrl = 3
            URL.TestParams.Test_TypeM = 0
            URL.TestParams.Test_TypeS = 0
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        red = function()
            URL.TestParams.ImageCtrl = 3
            URL.TestParams.Test_TypeM = 0
            URL.TestParams.Test_TypeS = 1
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        green = function()
            URL.TestParams.ImageCtrl = 3
            URL.TestParams.Test_TypeM = 0
            URL.TestParams.Test_TypeS = 2
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        blue  = function()
            URL.TestParams.ImageCtrl = 3
            URL.TestParams.Test_TypeM = 0
            URL.TestParams.Test_TypeS = 3
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        white = function()
            URL.TestParams.ImageCtrl = 3
            URL.TestParams.Test_TypeM = 0;
            URL.TestParams.Test_TypeS = 4
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        horizontal = function()
            URL.TestParams.ImageCtrl = 3
            URL.TestParams.Test_TypeM = 2
            URL.TestParams.Test_TypeS = 0
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        vertical = function()
            URL.TestParams.ImageCtrl = 3
            URL.TestParams.Test_TypeM =2
            URL.TestParams.Test_TypeS = 1
            URL.Base.Query = URL.TestParams
            return URL.Base
        end,

        diagonal = {
            function()
                URL.TestParams.ImageCtrl = 3
                URL.TestParams.Test_TypeM = 2
                URL.TestParams.Test_TypeS = 2
                URL.Base.Query = URL.TestParams
                return URL.Base
            end,

            function()
                URL.TestParams.ImageCtrl = 3
                URL.TestParams.Test_TypeM = 2
                URL.TestParams.Test_TypeS = 3
                URL.Base.Query = URL.TestParams
                return URL.Base
            end,
        }
    }


    -- Session Login
    local function create_session()
        return math.random(100000000000, 999999999999)
    end

   local function get_session()
        return session or create_session()
    end

    local function register_session()
        session = get_session()
        HttpClient.Download(URL.register())
        return session
    end


-- FUNCTIONS --

    local function bright_up( ctl )
        if ctl.Boolean and Controls.bright.Value < 100 then
            Controls.bright.Value = Controls.bright.Value + inc
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.brightness()),
                EventHandler = URL.done
            })
        end
    end

    local function bright_down( ctl )
        if ctl.Boolean and Controls.bright.Value > 0 then
            Controls.bright.Value = Controls.bright.Value - dec
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.brightness()),
                EventHandler = URL.done
            })
        end
    end


-- EventHandlers --
    Controls.IpAddress.EventHandler = set_ip
    Controls.brightdn.EventHandler = bright_down
    Controls.brightup.EventHandler = bright_up

-- Main Modes

    Controls["Normal Mode"].EventHandler = function ()
        if Controls["Normal Mode"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.normal()),
                EventHandler = URL.done
            })
        end
    end

    Controls.Blackout.EventHandler = function ()
        if Controls["Blackout"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.blackout()),
                EventHandler = URL.done
            })
        end
    end
 
-- Test Modes

    Controls["Test Red"].EventHandler = function ()
        if Controls["Test Red"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.red()),
                EventHandler = URL.done
            })
        end
    end

    Controls["Test Green"].EventHandler = function ()
        if Controls["Test Green"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.green()),
                EventHandler = URL.done
            })
        end
    end

    Controls["Test White"].EventHandler = function ()
        if Controls["Test White"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.white()),
                EventHandler = URL.done
            })
        end
    end

    Controls["Test Blue"].EventHandler = function ()
        if Controls["Test Blue"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.blue()),
                EventHandler = URL.done
            })
        end
    end

    Controls["Test Horizontal"].EventHandler = function ()
        if Controls["Test Horizontal"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.horizontal()),
                EventHandler = URL.done
            })
        end
    end

    Controls["Test Vertical"].EventHandler = function ()
        if Controls["Test Vertical"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.vertical()),
                EventHandler = URL.done
            })
        end
    end

    Controls["Test Diagonal 1"].EventHandler = function ()
        if Controls["Test Diagonal 1"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.diagonal[1]()),
                EventHandler = URL.done
            })
        end
    end

    Controls["Test Diagonal 2"].EventHandler = function ()
        if Controls["Test Diagonal 2"].Boolean then
            HttpClient.Download({
                Url = HttpClient.CreateUrl(URL.Choice.diagonal[2]()),
                EventHandler = URL.done
            })
        end
    end

    --INIT--
    session = create_session()
end
