



  -- Define the color of the plugin object in the design
  function GetColor(props)
    return { 50, 82, 123 }
  end




  -- Define User configurable Properties of the plugin
  function GetProperties()

  end


  -- Optional function to update avaiLabel properties when properties are altered by the user
  function RectifyProperties(props)
    if props.plugin_show_debug.Value == false then
      props["Debug Print"].IsHidden = true
    end
    return props
  end


  -- Defines the Controls used within the plugin
  function GetControls(props)

    local ctrls = {} -- control table

    for _, name in ipairs{"panelSelection", "pageSelection", "uciSelection"} do
        table.insert(ctrls, {
            Name = name,
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Both",
        })
    end

    for i=1, props["Page Buttons"].Value do
        table.insert(ctrls, {
            Name = "pageBtn_"..i,
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true
        })
    end

    for i=1, props["Page Buttons"].Value do
        table.insert(ctrls, {
            Name = "pageLabel_"..i,
            ControlType = "Text",
        })
    end

    if props["Pin Codes"].Value > 0 then
        for i=1, props["Pin Codes"].Value  do
            table.insert(ctrls, {
                Name = "pinCode_"..i,
                ControlType = "Text",
            })
            table.insert(ctrls, {
                Name = "pinCodeEnable_"..i,
                ControlType = "Button",
                ButtonType = "Toggle",

            })
        end

        for i=0, 9 do
            table.insert(ctrls, {
                Name = "keyPad_".. i,
                ControlType = "Button",
                ButtonType = "Momentary",
            })
        end

        for _, name in ipairs({"clear", "back", "enter"}) do
            table.insert(ctrls, {
                Name = name,
                ControlType = "Button",
                ButtonType = "Momentary",
            })
        end

        table.insert(ctrls, {
            Name = "PinNumber",
            ControlType = "Text",
        })
    end
    

    return ctrls
  end

  --Layout of controls and graphics for the plugin UI to display
  function GetControlLayout(props)
    local layout = {}
    local graphics = {}
    local CurrentPage = PageNames[props["page_index"].Value]
    local w, h, tol = 150, 50, 25
    local btn_w, btn_h = w/2, h/2
    local row = 1
    local col = 1

    if CurrentPage == "Control" then

        --Header--
        table.insert(graphics,
        {
            Type = "Header",
            Text = "Page Selection",
            Position = { tol, tol },
            Size = { w, h },
            FontSize = 12
          })

        --Selection Box--
        layout.pageSelection = {
            PrettyName = "Page Selection",
            Style = "ComboBox",
            Position = { tol, tol+h},
            Size = { w, h },
            FontSize = 12
          }

        --Header--
        table.insert(graphics,
        {
            Type = "Header",
            Text = "Page Buttons",
            Position = { tol, h*2+tol},
            Size = { w, h },
            FontSize = 12
          })
        
        for i=1, props["Page Buttons"].Value do
            layout["pageBtn_"..i] = {
                PrettyName = "Page Button~"..i,
                Style = "Button",
                ButtonType = "Toggle",
                Size = {btn_w/2, btn_h},
                Position = {tol, (h*3)+i*btn_h}
            }
            layout["pageLabel_"..i] = {
                PrettyName = "Page Label~"..i,
                Style = "ComboBox",
                Size = {btn_w + btn_w/2, btn_h},
                Position = {tol+btn_w - btn_w/2, (h*3)+i*btn_h},
                Margin = 2
            }
        end
        

    elseif CurrentPage == "Passcode" then

        local btn_h = btn_h*2

        for i=0, 9 do
            if i == 0 then 
                row, col = 4, 2
            elseif i < 4 then
                row, col = 1, i
            elseif i < 7 then
                row, col = 2, i-3
            else
                row , col = 3, i-6
            end
            layout["keyPad_"..i] = {
                PrettyName = "Key Pad "..i,
                Style = "Button",
                ButtonType = "Momentary",
                Size = {btn_h, btn_h},
                Position = {tol + col*btn_h, tol + row*btn_h}
            }
        end

        layout["clear"] = {
            PrettyName = "Clear",
            Style = "Button",
            ButtonType = "Momentary",
            Size = {btn_h, btn_h},
            Position = {tol + btn_h, tol + 4*btn_h}
        }
        layout["back"] = {
            PrettyName = "Back",
            Style = "Button",
            ButtonType = "Momentary",
            Size = {btn_h, btn_h},
            Position = {tol + 3*btn_h, tol + 4*btn_h}
        }
        layout["enter"] = {
            PrettyName = "Enter",
            Style = "Button",
            ButtonType = "Momentary",
            Size = {w, btn_h},
            Position = {tol + btn_h, tol + 5*btn_h}
        }
        layout["PinNumber"] = {
            PrettyName = "Pin Number",
            Style = "Text",
            Margin = 2,
            Size = {w, btn_h},
            Position = {tol+btn_h, tol}
        }


    elseif CurrentPage == "Configuration" then

        layout.panelSelection = {
            PrettyName = "Panel Selection",
            Style = "ComboBox",
            Position = {100, 50},
            Size = {w, h},
            FontSize = 12
        }

        layout.uciSelection = {
            PrettyName = "Panel Selection",
            Style = "ComboBox",
            Position = {100, 150},
            Size = {w, h},
            FontSize = 12
        }

        for index, name in ipairs({"Panel Selection", "UCI Selecion"}) do
            table.insert(graphics,
            {
                Type = "Text",
                Text = name,
                Position = {100, index*50*2 - 100},
                Size = {w,h},
                FontSize = 14,
                HTextAlign = "Left"
            }
        )
        end

    end
    return layout, graphics
  end


--Start event based logic
  if Controls then

    --[[ LIST OF CONTROLS:
            
        -"panelSelection",
        -"pageSelection",
        -"uciSelection"
    
    ]]

    table = require("Table")

    local PIN = ''
    local inventory = {
        controlDevices = {  -- List of possible invetory items that might have a uci attached.
            "touch_screen_status",
            "uci_viewer",
        }
    }


    local function panel_list()
        local list = {}
        for _, component in ipairs(Component.GetComponents()) do
            if table.contains(inventory.controlDevices, component.Type) then
            table.insert(list, component.Name)
            end
        end
        return list
    end

    local function isReadOnly(attribute)
    --attribute should be a table for the component control
    return attribute.Direction == "Read Only"
    end

    local function isDynamic(panel)
    for _, t in pairs(Component.GetControls(panel)) do
        if table.contains(t, "current.uci") then
        return not isReadOnly(t)  -- t is the attribute table that contains the current.uci control. 
        end
    end
    end


    local function Pages(panel)
        return Component.New(panel)["current.page"]
    end

    local function output_pin( ctl, num )
        if ctl.Boolean then
            PIN = PIN..num
            Controls.PinNumber.String = string.rep("*", #PIN)
        end
    end

    local function clear_pin( ctl )
        if ctl.Boolean then
            PIN = ''; Controls.PinNumber.String = ''
        end
    end

    local function create_pins()
        for name in pairs(COntrols) do
            
        end
        
    end

    local function enter_pin( ctl )
        if ctl.Boolean then
            check_pins()
        end
    end


    for _, panel in pairs(panel_list()) do
        if not isDynamic(panel) then print(panel, "Is not configured to be dynamic.") end
        -- for _, ctl in pairs(Component.GetControls(panel)) do
        --     -- for name, val in pairs(ctl) do print(v, i, name,val) end
        --     print("\t", ctl.Name, ctl.Direction, ctl.Type)
        -- end
    end

    function UpdateLabels()
        for ctl in pairs(Controls) do
            if ctl:match("pageLabel_%d") then Controls[ctl].Choices = Pages(Controls.panelSelection.String).Choices end
        end
    end

    --EVENTHANDLERS--
    Controls.panelSelection.EventHandler = function( ctl )
        Controls.pageSelection.Choices = Pages(Controls.panelSelection.String).Choices
        UpdateLabels()
    end

    Controls.pageSelection.EventHandler = function( ctl )
        Pages(Controls.panelSelection.String).String = ctl.String
    end

    for name in pairs(Controls) do
        if name:match("cat%d") then
            Controls[name].EventHandler = function( ctl )
                output_pin( ctl, name:match("%d") )
            end
        end
    end


    --INIT--
    Controls.panelSelection.Choices = panel_list()

    if Controls.panelSelection.String == '' then Controls.panelSelection.String = Controls.panelSelection.Choices[1] end
    Controls.pageSelection.Choices = Pages(Controls.panelSelection.String).Choices
end