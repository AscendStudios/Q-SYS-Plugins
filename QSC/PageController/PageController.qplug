-- Page Navigation Plugin
-- By Casey Compton
-- December 02 2022


-- Information block for the plugin
-- Information block for the plugin
PluginInfo = {
  Name = "Page Navigation",
  Version = "1.0",
  BuildVersion = "0.4.0.42",
  Id = "PageNavigation",
  Author = "Casey Compton",
  Description = "Plugin for full page navigation within Q-SYS control devices"
}

local colors = {
  dark = {59, 66, 82},
  light = {229, 233, 240},
  medium = {129,161,193},
  accent = {143,188,187},
  red = {191,97,106},
  orange = {208,135,112},
  yellow = {235,203,139},
  green = {163,190,140},
  pink = {180,142,173},
}

local fonts = {
  title = 24,
  normal = 16,
  small = 12,
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 50, 82, 123 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Page Navigation, V " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control", "Passcode", "Configuration", "About" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  -- For Each of the pages
  for ix in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {
    {
        Name = "Debug Print",
        Type = "enum",
        Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
        Value = "None"
    },
    {
        Name = "Page Buttons",
        Type = "integer",
        Min = 2,
        Max = 1000,
        Value = 3,
    },
    {
        Name = "Defined Pass Codes",
        Type = "integer",
        Min = 2,
        Max = 100,
        Value = 4,
    },
    {
      Name = "Admin Pin",
      Type = "string",
    }
  }
  return props
end


-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end


-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  -- table.insert(ctrls, {
  --   Name = "SendButton",
  --   ControlType = "Button",
  --   ButtonType = "Momentary",
  --   Count = 1,
  --   UserPin = true,
  --   PinStyle = "Input",
  --   Icon = "Power"
  -- })
  
  --------------------------------------------------------
  -- Navigation
  --------------------------------------------------------
  
  for _, name in ipairs{"panelSelection", "pageSelection", "uciSelection"} do
    table.insert(ctrls, {
        Name = name,
        ControlType = "Text",
        UserPin = true,
        PinStyle = "Both",
    })
  end
  
  
  table.insert(ctrls, {
      Name = "pageButton",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = props["Page Buttons"].Value,
      PinStyle = "Both",
      UserPin = true
  })
  
  table.insert(ctrls, {
      Name = "pageLabel",
      ControlType = "Text",
      Count = props["Page Buttons"].Value
  })
  
  --------------------------------------------------------
  -- Pin Code Controls
  --------------------------------------------------------
  
  table.insert(ctrls, {
      Name = "pinCode",
      ControlType = "Text",
      Count = props["Defined Pass Codes"].Value,
  })
  
  table.insert(ctrls, {
      Name = "pinEnable",
      ControlType = "Button",
      ButtonType = "Toggle",
      Count = props["Defined Pass Codes"].Value,
  
  })
  
  table.insert(ctrls, {
      Name = "adminLandingPage",
      ControlType = "Text",
  })
  
  table.insert(ctrls, {
      Name = "pinLandingPage",
      ControlType = "Text",
      Count = props["Defined Pass Codes"].Value
  })
  
  table.insert(ctrls, {
      Name = "numPad",
      ControlType = "Button",
      ButtonType = "Momentary",
      Count = 10
  })
  
  
  for _, name in ipairs({"clear", "back", "enter"}) do
      table.insert(ctrls, {
          Name = name,
          ControlType = "Button",
          ButtonType = "Momentary",
      })
  end
  
  table.insert(ctrls, {
      Name = "pinDisplay",
      ControlType = "Text",
  })
  
  table.insert(ctrls, {
      Name="panelStatus",
      ControlType = "Indicator",
      IndicatorType = "Status",
      PinStyle = "Output",
      UserPin = true
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  -- table.insert(graphics,{
  --   Type = "GroupBox",
  --   Text = "Control",
  --   Fill = {200,200,200},
  --   StrokeWidth = 1,
  --   Position = {5,5},
  --   Size = {200,100}
  -- })
  -- table.insert(graphics,{
  --   Type = "Text",
  --   Text = "Say Hello:",
  --   Position = {10,42},
  --   Size = {90,16},
  --   FontSize = 14,
  --   HTextAlign = "Right"
  -- })
  -- layout["SendButton"] = {
  --   PrettyName = "Buttons~Send The Command",
  --   Style = "Button",
  --   Position = {105,42},
  --   Size = {50,16},
  --   Color = {0,0,0}
  -- }
  
  
  local CurrentPage = PageNames[props["page_index"].Value]
  local w, h, tol = 150, 50, 25
  local btn_w, btn_h = w/2, h/2
  local row = 1
  local col = 1
  
  ---------------------------------------------------------
  -- Control Page
  ---------------------------------------------------------
  if CurrentPage == "Control" then
  
      table.insert(graphics, {
          Type = "Text",
          Text = "Touch Panel Status",
          Size = {w, tol/2},
          Position = {tol, 0}
      })
  
      layout["panelStatus"] = {
          PrettyName = "Touch Panel Status",
          Style = "Indicator",
          Position = {tol, tol/2},
          Size = {w, tol + (tol/2)},
          Margin = 2,
          Padding = 3
      }
  
      table.insert(graphics,
      {
          Type = "Header",
          Text = "Page Selection",
          Position = { tol, tol+ (tol/2) },
          Size = { w, h },
          FontSize = fonts.small
        })
  
      --Selection Box--
      layout.pageSelection = {
          PrettyName = "Page Selection",
          Style = "ComboBox",
          Position = { tol, tol+ (tol/2)+h},
          Size = { w, h },
          FontSize = fonts.small
        }
  
      --Header--
      table.insert(graphics,
      {
          Type = "Header",
          Text = "Page Buttons",
          Position = { tol, h*2+tol+tol},
          Size = { w, btn_h },
          FontSize = fonts.small
        })
      
      --Init Layout for buttons and labels
      layout["pageButton"] = {
      Style = "Button",
      ButtonType = "Toggle",
      Size = { btn_w/2, btn_h },
      Position = { tol, (h*3) + (btn_h) }
      }
  
      layout["pageLabel"] = {
      Style = "ComboBox",
      Margin = 2,
      Size = { btn_w + btn_w/2, btn_h },
      Position = { tol + btn_w - (btn_w/2), (h*3) + ( btn_h) },
      }
  
      -- Each Button and Label layout
      for index=1, props["Page Buttons"].Value do
          layout["pageButton "..index] = {
              PrettyName = "Page Button~"..index,
              Size = { btn_w/2, btn_h },
              Position = { tol, (h*3) + (index * btn_h) }
          }
          layout["pageLabel "..index] = {
              Style = "ComboBox",
              Size = { btn_w + btn_w/2, btn_h },
              Position = { tol + btn_w - (btn_w/2), (h*3) + (index * btn_h) },
          }
      end
  ------------------------------------------------------------
  ---------------------------PASSCODE-------------------------
  ------------------------------------------------------------
  elseif CurrentPage == "Passcode" then
  
      --init button layout
      layout["numPad"] = {
          PrettyName = "Number Pad",
          Style = "Button",
          ButtonType = "Momentary",
          Size = {h, h},
          Position = {tol, tol + h}
      }
  
      for i=1, 10 do
          local zero = nil
          if i == 10 then
              row, col = 4, 2
              zero = "0"
          elseif i < 4 then
              row, col = 1, i
          elseif i < 7 then
              row, col = 2, i-3
          else
              row , col = 3, i-6
          end
          layout["numPad "..i] = {
              PrettyName = "Num Pad "..i,
              Legend = zero or tostring(i),
              Size = {h, h},
              Position = {tol + col*h-h, tol + row*h},
              FontSize = fonts.normal
          }
      end
  
    layout["clear"] = {
        PrettyName = "Clear",
        Style = "Button",
        ButtonType = "Momentary",
        Legend = "Clear",
        Size = {h, h},
        Position = {tol, tol + 4*h}
    }
    layout["back"] = {
        PrettyName = "Back",
        Legend = "Back",
        Style = "Button",
        ButtonType = "Momentary",
        Size = {h, h},
        Position = {tol + 3*h-h, tol + 4*h}
    }
    layout["enter"] = {
        PrettyName = "Enter",
        Legend = "Enter",
        Style = "Button",
        ButtonType = "Momentary",
        Size = {w, h},
        Position = {tol, tol + 5*h},
        FontSize = fonts.normal
    }
    layout["pinDisplay"] = {
        PrettyName = "Pin Display",
        Style = "Text",
        Margin = 2,
        Size = {w, h},
        Position = {tol, tol},
        FontSize = fonts.normal
    }
  
  ---------------------------------------------------------------
  -------------------------CONFIGURATION-------------------------
  ---------------------------------------------------------
  
  elseif CurrentPage == "Configuration" then
  
      w = w + btn_h
  
      for index, name in ipairs({"Panel Selection", "UCI Selecion"}) do
          table.insert(graphics,
              {
                  Type = "Text",
                  Text = name,
                  Position = {tol+w*index - w, tol},
                  Size = {w,h},
                  FontSize = 14,
                  HTextAlign = "Left"
              })
  
      layout.panelSelection = {
          PrettyName = "Panel Selection",
          Style = "ComboBox",
          Position = {tol, tol+h},
          Size = {w, h},
          FontSize = 12,
          Margin = 2
      }
  
      layout.uciSelection = {
          PrettyName = "UCI Selection",
          Style = "ComboBox",
          Position = {tol+w, tol+h},
          Size = {w, h},
          FontSize = 12,
          Margin = 2
      }
  
      table.insert(graphics, {
          Type = "Header",
          Text = "Pin Code Configuration",
          Position = {tol, tol+(h*3)},
          Size = {w*2, h},
          FontSize = fonts.normal,
          Margin = 2,
      })
  
      table.insert(graphics, {
          Type = "Text",
          Text = "Admin Page",
          Position = {tol, tol+(h*4)},
          Size = {w-btn_h, h},
          FontSize = fonts.small,
          Margin = 2,
          HTextAlign = "Left"
      })
  
      layout.adminLandingPage = {
          PrettyName = "Admin Landing Page",
          Style = "ComboBox",
          Position = {tol, tol+(h*5)},
          Size = {w-btn_h, btn_h},
          FontSize = fonts.small,
          Margin = 2
      }
  
      table.insert(graphics, {
        Type = "Text",
        Text = "Pin",
        Position = {tol+w + btn_h, tol+(h*4)},
        Size = {btn_w, h},
        FontSize = fonts.small,
        Margin = 2,
        HTextAlign = "Left"
        })
  
      table.insert(graphics, {
      Type = "Text",
      Text = "Page",
      Position = {tol+w + btn_h+btn_w, tol+(h*4)},
      Size = {btn_w, h},
      FontSize = fonts.small,
      Margin = 2,
      HTextAlign = "Left"
      })
  
      layout["pinEnable"] = {
      PrettyName = "Pin Enable",
      Style = "Button",
      ButtonType = "Toggle",
      Size = {btn_h, btn_h},
      Position = { tol+w, tol+(h*5)}
      }
  
      layout["pinCode"] = {
      PrettyName = "Pin Codes",
      Style = "ComboBox",
      Size = {btn_w, btn_h},
      Position = { (tol+w)+btn_h, tol+(h*5)},
      Margin = 2
      }
  
      layout["pinLandingPage"] = {
      PrettyName = "Custom Landing Page",
      Style = "ComboBox",
      Size = {btn_w, btn_h},
      Position = {(tol+w)+btn_h+btn_w, tol+(h*5)},
      Margin = 2
      }
  
  
        for i=1, props["Defined Pass Codes"].Value do
          layout["pinEnable "..i] = {
              PrettyName = "Pin Enable "..i,
              Size = {btn_h, btn_h},
              Position = {tol+w, tol+(h*5)+btn_h*(i-1)}
          }
  
          layout["pinCode "..i] = {
              PrettyName = "Pin Code "..i,
              Size = {btn_w, btn_h},
              Position = { (tol+w)+btn_h, tol+(h*5)+btn_h*(i-1)},
              Margin = 2,
          }
          layout["pinLandingPage "..i] = {
              PrettyName = "Custom Landing Page "..i,
              Size = {btn_w, btn_h},
              Position = {(tol+w)+btn_h+btn_w, tol+(h*5)+btn_h*(i-1)},
              Margin = 2,
              Style = "ComboBox",
          }
        end
    end
  
  elseif CurrentPage == "About" then
      -- table.insert(graphics,{
  --   Type = "Text",
  --   Text = "Say Hello:",
  --   Position = {10,42},
  --   Size = {90,16},
  --   FontSize = 14,
  --   HTextAlign = "Right"
  -- })
  local image_w, image_h = 264, 222
  local logo = "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"
  table.insert(graphics,{
      Type="Image",
      Image=logo,
      Position={tol,tol},
      Size={image_w,image_h}
    })
  
    table.insert(graphics, {
      Type = "GroupBox",
      Position={tol+image_w,tol},
      Size={image_w+tol*2,image_h},
      Fill = colors.light,
      StrokeWidth = 1,
    })
  
    table.insert(graphics, {
      Type = "Text",
      Text = "Ascend Studios",
      Size = {w*2,h},
      Position = {tol*2+image_w, tol},
      FontSize = fonts.title,
      HTextAlign = "Left"
    })
  
      table.insert(graphics,{
          Type = "Text",
          Text = "Name: "..PluginInfo.Name,
          Size = {w*2,h/2},
          Position = {tol*2+image_w, (tol*2)+(h/2)},
          FontSize = fonts.small,
          HTextAlign = "Left"
      })
      table.insert(graphics,{
          Type = "Text",
          Text = "Version: "..PluginInfo.Version,
          Size = {w*2,h/2},
          Position = {tol*2+image_w, (tol*2)+(h/2)*2},
          FontSize = fonts.small,
          HTextAlign = "Left"
      })
      table.insert(graphics,{
          Type = "Text",
          Text = "Build: "..PluginInfo.BuildVersion,
          Size = {w*2,h/2},
          Position = {tol*2+image_w, (tol*2)+(h/2)*3},
          FontSize = fonts.small,
          HTextAlign = "Left"
      })
      table.insert(graphics,{
          Type = "Text",
          Text = "Author: "..PluginInfo.Author,
          Size = {w*2,h/2},
          Position = {tol*2+image_w, (tol*2)+(h/2)*4},
          FontSize = fonts.small,
          HTextAlign = "Left"
      })
      table.insert(graphics,{
          Type = "Text",
          Text = "Email: Support@AscendStudios.com",
          Size = {w*2,h/2},
          Position = {tol*2+image_w, (tol*2)+(h/2)*5},
          FontSize = fonts.small,
          HTextAlign = "Left"
      })
      table.insert(graphics,{
          Type = "Text",
          Text = "https://github.com/AscendStudios/Q-SYS-Plugins",
          Size = {w*2,h/2},
          Position = {tol*2+image_w, (tol*2)+(h/2)*6},
          FontSize = fonts.small,
          HTextAlign = "Left",
      })
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  --[[ LIST OF CONTROLS:
  
      "panelSelection",
      "pageSelection",
      "uciSelection",
      "pageButton",
      "pageLabel",
      "pinCode",
      pinLandingPage,
      adminLandingPage,
      "pinEnable",
      "numPad",
      "clear",
      "enter",
      "back",
      "pinDisplay"
  
  ]]
  
    --[[
    
    Advanced Table functions that are not implemented in LUA
    
      To use:
        require("Advanced_Tables")
        Then call as expeted - table.reverse(tbl)
    
    --]]
    
    local table = table
    
    function table.is_empty(self)
      return #self == 0
    end
    
    -- Adding a return on index as an option to grab --
    function table.contains(self, element, ...)
      for index, value in pairs(self) do
        if ... then value = value[...] end
        if value == element then
          return true, index
        end
      end
      return false, nil
    end
    
    function table.reverse(self)
      for i=1, math.floor(#self / 2) do
        self[i], self[#self - i + 1] = self[#self - i + 1], self[i]
      end
    end
    
    function table.print(self)
      local rj = require "rapidjson"
      print(rj.encode(self, {pretty=true}))
    end
    
    function table.keys(self)
      local keyset={}
      for key in pairs(self) do
        table.insert(keyset, key)
      end
      return keyset
    end
    
    function table.values(self)
      local valset = {}
      for i, v in pairs(self) do
        valset[v] = i
      end
      return valset
    end
    
    function table.test(self, func, ...)
      --[[
      This function will test if each item in a table return true given
      the provided condition. The condition should be given as a function
      that will return a boolean value. The function's first parameter
      must be the table variable. afterwards, additional arguments can be
      provided.
      --]]
      local counter = 0
      for key, value in pairs(self) do
        if func(value, ...) then
          counter = counter + 1
        else
          break
        end
      end
      return counter == #self
    end
    
    -- Function to count elements in a table.
    -- Default uses values, but keys can be used by setting keys = true
    function table.count(self, element, keys)
      local count = 0
      for idx, item in pairs(self) do
        if keys then item = idx end
        if item == element then count = count + 1 end
      end
      return count
    end
    
    
  
  function MakeExclusive(ArrayOfCtrls)
      for i , v in pairs(ArrayOfCtrls) do
        local oldEH = v.EventHandler or function() end
        v.EventHandler = function()
          for x,y in pairs(ArrayOfCtrls) do
            y.Boolean = x == i
          end
          oldEH()
        end
      end
  end
  
  ------------------------------------------
  -- RUNTIME GLOBALS
  ------------------------------------------
    local PIN = ''
    local CODES = {["Admin"] = {
        pin = Properties["Admin Pin"].Value,
        page = Controls.adminLandingPage.String,
        enabled = Properties["Admin Pin"].Value ~= '',
    } }
    -- Add in the custom pin codes to the codes table
    for i=1, Properties["Defined Pass Codes"].Value do
        CODES[i] = {
            pin = Controls.pinCode[i].String,
            page = Controls.pinLandingPage[i].String,
            enabled = Controls.pinEnable[i].Boolean
        }
        
    end
    
    local inventory = {
        controlDevices = {  -- List of possible invetory items that might have a uci attached.
            "touch_screen_status",
            "uci_viewer",
        }
    }
  ------------------------------------------
  -- FUNCTIONS
  ------------------------------------------
    ---------------------------------------------------------------------------
    -- PANELS
    ---------------------------------------------------------------------------
    local function panel_list()
        local list = {}
        for _, component in ipairs(Component.GetComponents()) do
            if table.contains(inventory.controlDevices, component.Type) then
            table.insert(list, component.Name)
            end
        end
        return list
    end
    
    local function isReadOnly(attribute)
    --attribute should be a table for the component control
    return attribute.Direction == "Read Only"
    end
    
    local function isDynamic(panel)
        for _, t in pairs(Component.GetControls(panel)) do
            if table.contains(t, "current.uci") then
                return not isReadOnly(t)  -- t is the attribute table that contains the current.uci control. 
            end
        end
    end
    
    local function Pages(panel)
        return Component.New(panel)["current.page"]
    end
    
    local function Ucis(panel)
        return Component.New(panel)["current.uci"]
    end
    
    local function Status(panel)
        return Component.New(panel)["status"]
    end
    
    local function updateStatusDevice()
        if PANEL_STATUS ~= nil then PANEL_STATUS.EventHandler = function() end end
        PANEL_STATUS = Status(Controls.panelSelection.String)
        PANEL_STATUS.EventHandler = function( ctl )
            Controls.panelStatus.String = ctl.String
        end
        Controls.panelStatus.String = PANEL_STATUS.String
    end
    
    local function set_page(page_name)
        if table.contains(Controls.pageSelection.Choices, page_name) then
            Controls.pageSelection.String = page_name           --Update the plugin dropdown
            Pages(Controls.panelSelection.String).String = page_name   --Update the actual panel
        else
            Controls.pinDisplay.String = "Error PNF"
            Timer.CallAfter( function() PIN = ''; Controls.pinDisplay.String = '' end, 2)
            Log.Error(string.format(
                "PAGE LOADING ERROR: \t Page: %s is not found on Panel: %s",
                page_name,
                Controls.panelSelection.String))
        end
    end
    
    ---------------------------------------------------------------------------
    -- PIN LOGIC
    ---------------------------------------------------------------------------
    local function output_pin( ctl, num )
        if num == 10 then num = 0 end
        if ctl.Boolean then
            PIN = PIN..num
            Controls.pinDisplay.String = string.rep("*", #PIN)
        end
    end
    
    local function clear_pin( ctl )
        if ctl.Boolean then
            PIN = ''; Controls.pinDisplay.String = ''
        end
    end
    
    local function backspace_pin( ctl )
        if ctl.Boolean then
            PIN = PIN:sub(1, #PIN -1)
            Controls.pinDisplay.String = PIN
        end
    end
    
    local function enter_pin( ctl )
    
        local function incorrect()
            Controls.pinDisplay.String = 'INCORRECT'; Timer.CallAfter(
                function() Controls.pinDisplay.String = ''; PIN = '' end,
                2
            )
        end
    
        local pseudo_ctl = {Boolean = true}
    
        if ctl.Boolean then
    
            for name, code in pairs(CODES) do
                if name == "Admin" and code.enabled then
                    if PIN == code.pin then
                        Log.Message("Admin Logged In")
                        set_page(Controls.adminLandingPage.String)
                        clear_pin(pseudo_ctl)
                        return
                    end
                else
                    if PIN == code.pin and code.enabled then
                        Log.Message(string.format("User: %d Logged In", name))
                        set_page( Controls.pinLandingPage[name].String)
                        clear_pin(pseudo_ctl)
                        return
                    end
                end
            end
            incorrect()
        end
    end
    
    
    local function update_pins(index)
        CODES[index].pin = Controls.pinCode[index].String
        CODES[index].enabled = Controls.pinEnable[index].Boolean
        CODES[index].page = Controls.pinLandingPage[index].String
    end
    
    local function get_landing_pages()
        local pages = Pages(Controls.panelSelection.String).Choices
    
        -- Set the choices for the pin landing pages
        Controls.adminLandingPage.Choices = pages
        for _, ctl in pairs(Controls.pinLandingPage) do
            ctl.Choices = pages
        end
    end
    
    ---------------------------------------------------------------------------
    -- Update Pages and Labels
    ---------------------------------------------------------------------------
    
    local function updatePageLabels()
        local pages = Pages(Controls.panelSelection.String)
        --Panels
        Controls.pageSelection.Choices = pages.Choices
        Controls.pageSelection.String = pages.String
        for _, label in pairs(Controls.pageLabel) do
            label.Choices = pages.Choices
        end
        --Pins
        get_landing_pages()
    end
  -----------------------------------------------------------------------------
  -- EVENTHANDLERS
  -----------------------------------------------------------------------------
    ----------------------------------------------------------------
    -- Panel Change
    ----------------------------------------------------------------
    Controls.panelSelection.EventHandler = function( ctl )
      if isDynamic(ctl.String) then
          Controls.uciSelection.Choices = Ucis(ctl.String).Choices
          Controls.uciSelection.String = Ucis(ctl.String).String
      else 
          Controls.uciSelection.String = "UCI is Static."
      end
    
      updatePageLabels()
      updateStatusDevice()
    end
    
    
    ----------------------------------------------------------------
    -- UCI Change
    ----------------------------------------------------------------
    Controls.uciSelection.EventHandler = function( ctl )
      Ucis(Controls.panelSelection.String).String = ctl.String
      updatePageLabels()
    end
    
    ----------------------------------------------------------------
    -- Page Change Using Dropdown
    ----------------------------------------------------------------
    Controls.pageSelection.EventHandler = function( ctl )
      Pages(Controls.panelSelection.String).String = ctl.String
    end
    
    ----------------------------------------------------------------
    -- Page Change Using Buttons
    ----------------------------------------------------------------
    for index, ctl in pairs(Controls.pageButton) do
      ctl.EventHandler = function()
          set_page(Controls.pageLabel[index].String)
      end
    end
    
    ----------------------------------------------------------------
    -- Pin Number Controls
    ----------------------------------------------------------------
    for index, ctl in pairs(Controls.numPad) do
      ctl.EventHandler = function()
          output_pin( ctl, index )  --Show the pin number using *
      end
    end
    
    Controls.clear.EventHandler = clear_pin
    Controls.enter.EventHandler = enter_pin
    Controls.back.EventHandler = backspace_pin
    
    
    ----------------------------------------------------------------
    -- Update User Pins
    ----------------------------------------------------------------
    for index=1, Properties["Defined Pass Codes"].Value do
      for _, ctl in pairs{Controls.pinCode, Controls.pinEnable, Controls.pinLandingPage} do
          ctl[index].EventHandler = function()
              update_pins(index)
          end
      end
    end
    
    --
    -- Add exclusivity
    --
    MakeExclusive(Controls.pageButton)
    
  
  --------------------------------------------------------------------
  -- INIT
  --------------------------------------------------------------------
  -- Set the Panel List
  Controls.panelSelection.Choices = panel_list()
  
  -- Set a default Panel Selection
  if Controls.panelSelection.String == '' then Controls.panelSelection.String = Controls.panelSelection.Choices[1] end
  
  -- Set Page List
  Controls.pageSelection.Choices = Pages(Controls.panelSelection.String).Choices
  
  -- Set Current Page
  Controls.pageSelection.String = Pages(Controls.panelSelection.String).String
  
  -- Set Page labels for Page buttons and pin labels
  updatePageLabels()
  
  if isDynamic(Controls.panelSelection.String) then
      Controls.uciSelection.Choices = Ucis(Controls.panelSelection.String).Choices
      Controls.uciSelection.String = Ucis(Controls.panelSelection.String).String
  else
      Controls.uciSelection.String = "UCI is Static."
  end
  
  
  updateStatusDevice()
end
